{"version":3,"sources":["components/Header.js","components/Section.js","components/Characters.js","components/Headerone.js","components/Headertwo.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Section","item","src","image","alt","name","actor","house","dateOfBirth","ancestry","Characters","items","map","Headerone","useState","setItems","useEffect","a","axios","result","data","fetchItemm","Headertwo","console","log","App","fetchItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mRAYeA,MAVf,WACI,OACE,6BACE,4BAAQC,UAAU,UACpB,+C,gBC2BSC,MA/Bf,YAA0B,IAARC,EAAO,EAAPA,KAGd,OACI,yBAAKF,UAAU,QACjB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,yBAAKG,IAAKD,EAAKE,MAAOC,IAAI,MAE5B,yBAAKL,UAAU,aACb,4BAAKE,EAAKI,MACV,4BACE,4BACE,+CADF,IACgCJ,EAAKK,OAErC,4BACE,0CADF,IAC2BL,EAAKM,OAEhC,4BACE,6CADF,IAC8BN,EAAKO,aAEnC,4BACE,6CADF,IAC8BP,EAAKQ,eCThCC,MAbf,YAA8B,IAATC,EAAQ,EAARA,MACjB,OACE,6BAASZ,UAAU,SAErBY,EAAMC,KAAI,SAAAX,GAAI,OAEV,kBAAC,EAAD,CAASA,KAAMA,SC2BRY,MAhCf,WAAsB,IAAD,EACSC,mBAAS,IADlB,mBACVH,EADU,KACHI,EADG,KAqBjB,OAfJC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEAEIC,IAAM,uDAFV,OAEXC,EAFW,OAQjBJ,EAASI,EAAOC,MARC,2CAAH,qDAYhBC,KACC,IAEK,6BACA,4BAAQtB,UAAU,UAClB,kDAGF,kBAAC,EAAD,CAAYY,MAAOA,MCIVW,MA/Bf,WAAsB,IAAD,EAESR,mBAAS,IAFlB,mBAEVH,EAFU,KAEHI,EAFG,KAoBjB,OAhBCC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEAEIC,IAAM,oDAFV,OAEXC,EAFW,OAMjBI,QAAQC,IAAIL,EAAOC,MAEnBL,EAASI,EAAOC,MARC,2CAAH,qDAYhBC,KACC,IAGC,6BACA,4BAAQtB,UAAU,UAClB,+CAGF,kBAAC,EAAD,CAAYY,MAAOA,MCcVc,MAjCf,WAAgB,IAAD,EACWX,mBAAS,IADpB,mBACRH,EADQ,KACDI,EADC,KAsBb,OAhBFC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEAEIC,IAAM,8CAFV,OAEXC,EAFW,OAQjBJ,EAASI,EAAOC,MARC,2CAAH,qDAYhBM,KACC,IAGC,yBAAK3B,UAAU,aAElB,kBAAC,EAAD,MACD,kBAAC,EAAD,CAAYY,MAAOA,IACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,QC1BoBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.3d818c86.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n      <div>\r\n        <header className=\"center\">\r\n      <h1>Harry Potter</h1>\r\n    </header>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nfunction Section({item}) {\r\n    // console.log(item.house)\r\n    // console.log(item.image)\r\n    return (\r\n        <div className='card'>\r\n      <div className='card-inner'>\r\n        <div className='card-front'>\r\n          <img src={item.image} alt='' />\r\n        </div>\r\n        <div className='card-back'>\r\n          <h1>{item.name}</h1>\r\n          <ul>\r\n            <li>\r\n              <strong>Actor Name:</strong> {item.actor}\r\n            </li>\r\n            <li>\r\n              <strong>House:</strong> {item.house}\r\n            </li>\r\n            <li>\r\n              <strong>Birthday:</strong> {item.dateOfBirth}\r\n            </li>\r\n            <li>\r\n              <strong>Ancestry:</strong> {item.ancestry}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Section\r\n","import React from 'react'\r\nimport Section from './Section'\r\nfunction Characters({items}) {\r\n    return (\r\n      <section className=\"cards\">\r\n{\r\n    items.map(item =>(\r\n       \r\n        <Section item={item}></Section>\r\n    ))\r\n}\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default Characters\r\n","import React, {useState,useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport Characters from'../components/Characters'\r\nfunction Headerone() {\r\n    const [items, setItems] = useState([])\r\n\r\n\r\n\r\n\r\nuseEffect(() => {\r\n  const fetchItemm = async () => {\r\n    \r\n    const result = await axios(\r\n      `http://hp-api.herokuapp.com/api/characters/students`\r\n    )\r\n\r\n   // console.log(result.data)\r\n\r\n    setItems(result.data)\r\n    \r\n  }\r\n\r\n  fetchItemm()\r\n}, [])\r\n    return (\r\n        <div>\r\n        <header className=\"center\">\r\n        <h1>Hogwarts students</h1>\r\n\r\n      </header>\r\n      <Characters items={items} />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Headerone\r\n","import React, {useState,useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport Characters from'../components/Characters'\r\nfunction Headertwo() {\r\n\r\n    const [items, setItems] = useState([])\r\n\r\n     useEffect(() => {\r\n      const fetchItemm = async () => {\r\n        \r\n        const result = await axios(\r\n          `http://hp-api.herokuapp.com/api/characters/staff`\r\n        )\r\n    \r\n        console.log(result.data)\r\n    \r\n        setItems(result.data)\r\n        \r\n      }\r\n    \r\n      fetchItemm()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n        <header className=\"center\">\r\n        <h1>Hogwarts staff</h1>\r\n\r\n      </header>\r\n      <Characters items={items} />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Headertwo\r\n","import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Headerone from './components/Headerone'\nimport Headertwo  from './components/Headertwo'\nimport axios from 'axios'\nimport Characters from'./components/Characters'\n\n\n\nfunction App() {\nconst [items, setItems] = useState([])\n\n\n\n\nuseEffect(() => {\n  const fetchItems = async () => {\n    \n    const result = await axios(\n      `http://hp-api.herokuapp.com/api/characters`\n    )\n\n   //  console.log(result.data)\n\n    setItems(result.data)\n    \n  }\n\n  fetchItems()\n}, [])\n\n  return (\n    <div className='container'>\n \n <Header/>\n<Characters items={items} />\n<Headerone/>\n<Headertwo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}